IOC—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。

理解IOC的关键点
    
    谁控制谁
    控制什么
    什么是反转
    那些方面反转了
    
谁控制谁
    
    有了IOC，创建对象就交给IOC容器去创建了，及IOC容器控制对象
   
控制什么
    
    控制了外部资源获取，不仅仅是对象
    
什么是反转

    先提正转，传统应用程序由自己在对象中主动控制直接获取依赖的对象
    反转就是不再主动获取依赖，交给IOC容器，容器会实现创建和提供依赖对象
    对象变为被动接受对象
    
那些方面反转了

    对于依赖对象的获取被反转了，由主动获取，变为被动接受

IOC带来的好处
    
    传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试
    有了ioc降低了类与类之间的耦合，对象与对象之间的关系松散，便于测试
    
IoC和DI
______
    
    理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”
    谁依赖于谁：当然是应用程序依赖于IoC容器；
    为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；
    谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；
    注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。
    
控制反转是目的，依赖注入是实现控制反转的手段。
    
    控制反转是一种设计思想，注入依赖算是具体实现了这思想（个人理解）